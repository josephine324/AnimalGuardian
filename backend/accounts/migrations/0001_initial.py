# Generated by Django 4.2.7 on 2025-10-13 15:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('farmer', 'Farmer'), ('veterinarian', 'Veterinarian'), ('admin', 'Admin'), ('field_officer', 'Field Officer')], default='farmer', max_length=20)),
                ('phone_number', models.CharField(help_text='Phone number with country code (e.g., +250xxxxxxxx)', max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+250xxxxxxxx'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('province', models.CharField(blank=True, max_length=100)),
                ('district', models.CharField(blank=True, max_length=100)),
                ('sector', models.CharField(blank=True, max_length=100)),
                ('cell', models.CharField(blank=True, max_length=100)),
                ('village', models.CharField(blank=True, max_length=100)),
                ('preferred_language', models.CharField(choices=[('en', 'English'), ('rw', 'Kinyarwanda'), ('fr', 'French')], default='rw', max_length=10)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_code', models.CharField(blank=True, max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OTPVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(max_length=17)),
                ('otp_code', models.CharField(max_length=6)),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
            options={
                'verbose_name': 'OTP Verification',
                'verbose_name_plural': 'OTP Verifications',
                'db_table': 'otp_verifications',
            },
        ),
        migrations.CreateModel(
            name='VeterinarianProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_number', models.CharField(max_length=50, unique=True)),
                ('license_type', models.CharField(choices=[('licensed', 'Licensed Veterinarian'), ('assistant', 'Veterinary Assistant'), ('technician', 'Veterinary Technician')], max_length=20)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('clinic_name', models.CharField(blank=True, max_length=200)),
                ('clinic_address', models.TextField(blank=True)),
                ('is_available', models.BooleanField(default=True)),
                ('working_hours', models.JSONField(blank=True, default=dict)),
                ('years_of_experience', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_cases_handled', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='vet_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Veterinarian Profile',
                'verbose_name_plural': 'Veterinarian Profiles',
                'db_table': 'veterinarian_profiles',
            },
        ),
        migrations.CreateModel(
            name='FarmerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_name', models.CharField(blank=True, max_length=200)),
                ('farm_size', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('farm_size_unit', models.CharField(choices=[('hectares', 'Hectares'), ('acres', 'Acres')], default='hectares', max_length=10)),
                ('total_livestock_count', models.PositiveIntegerField(default=0)),
                ('years_of_farming', models.PositiveIntegerField(default=0)),
                ('has_smartphone', models.BooleanField(default=False)),
                ('has_basic_phone', models.BooleanField(default=True)),
                ('has_internet_access', models.BooleanField(default=False)),
                ('preferred_communication', models.CharField(choices=[('sms', 'SMS'), ('ussd', 'USSD'), ('app', 'Mobile App'), ('call', 'Phone Call')], default='sms', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='farmer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Farmer Profile',
                'verbose_name_plural': 'Farmer Profiles',
                'db_table': 'farmer_profiles',
            },
        ),
    ]
